TITLE:: Score Guideline for Notator
summary:: musicXML File Writer for SuperCollider
categories:: Notator
related:: Classes/Notator, Classes/PitchClassSet, Classes/SPN


















section::1. Overview





strong::A score should be written in bar notation as an array.::

note::
Bar notation here means a notation in which each part appears within each bar (parts per bar). The opposite concept is part notation, where each bar appears within each part (bars per part).
::
The first element should be information about the composer, title and copyright. The elements from the second to the last are musical notation events, and each event contains the musical information for each bar.

strong::The parts of a bar should be constructed as elements within an event.:: It contains all parts of the bar with keys like code::\p1::, code::\p2::, etc:.
Each part should be an event that contains its notation information in the bar.
The value of the event key is an array containing the notation information of its part in the bar:


warning::
The first bar should contain all the parts of the whole score even though one or more particular parts do not appear in the first bar.
::


It also contains the "bar number" with the key code::\bar::. This is only used to indicate the bar number when entering musical events in a particular bar, as a comment is often used to indicate the bar number. You can ignore the code::\bar:: if you do not need it.


code::
(
aVariable = [
	(title: 'the name of title', composer: 'the name of composer', rights: '© copyright'),
	(bar: 1, p1: (...), p2: (...), p3: (...), p4: (...), p5: (...), p6: (...), ..., pn: (...)),
	(bar: 2, p1: (...), p2: (...), ...),
	...
]
)
::

Each part consists of a emphasis::staff label::, an emphasis::attribute:: and one or more emphasis::voices:: (The term voice here is very similar to the term voice used in traditional western classical poplyphonic music. If one has a very narrow view of the concept of voice, there may be a difference, as the voice here can include chords.).

Each can be defined with its own key and contains the following information
table::
##components
||
key
||
data type

for its value
||
details
##staff label||code::\lbl::||symbol||
list::
##the name of a staff

(or staves, if more than one staff is registered)
::
##attributes||code::\atr::||event||
list::
##the number of staves
##clef

(or clefs if more than one staff is registered)
##time signaure
##key signature and optional transposition information
::
##voices
||
code::\v1::

code::\v2::

...
||
array
||
list::
##tempo
##dynamic markings
##note or chord with pitch, duration and articulation

as well as tie and slur status
##rest with duration
::

note::
Three ways to construct the musical information of a voice: anchor::Three ways to construct the musical information of a voice::
table::
##numberedlist::
##Array-in-Array notation:

each musical information as an element in an array
code::
v1: [[\t,\q,90],[\F],[\e5],[[\d,\f],$~],[$|,16],[[72,76]]]
::
##Symbol-in-Array notation:

each musical information as a symbol or string in an array
code::
v1: ['t q 90', \F, \e5, "<d f> ~", '| 16', "<72 76>"]
::
##String notation:

all the musical information in a voice as a string
code::
v1: "t_q_90 F e5 <d_f>_~ |_16 <72_76>"
::
::
::

The last option is recommended for transcribing an existing piece.

The other options are more complicated, but are useful for

algorithmic composition.
::
::

The staff label, number of staves and optional transposition information should be defined in the first bar. Attributes such as time signature, key signature, clef can be changed in any bar, if necessary, as follows:

code::
(
aVariable = [
	(title: 'the name of title', composer: 'the name of composer', rights: '© copyright'),

	(
		bar: 1,
		p1:(
			lbl: \staffLabel,
			atr: (...),
			v1:[...],
			v2: [...],
			...
		),
		p2:(...), ...
	),

	(
		bar: 2, p1: (v1:[...], v2: [...], ...), p2: (v1:[...], v2: [...], ...), ...
	),

	(
		bar: 3,
		p1: (
			atr: (...),
			v1:[...],
			v2: [...],
			...
		),
		p2: (v1:[...], v2: [...], ...), ...
	),

	...
]
)
::










note::Accessing particular element
Array indices can be used to access a particular element or a range of elements:

list::

##To access the first element (title, composer and copyright):
code::
a_variable_of_the_score[0]
::

##to access a bar or bars:

list::
##To access a particular bar:
code::
a_variable_of_the_score[the_number_of_a_particular_bar]
::


table::

##Examples:


list::
##To access the first bar:
code::
a_variable_of_the_score[1]
::
##To access the tenth bar:
code::
a_variable_of_the_score[10]
::
::
::

##To access a series of bars:


list::

##code::
a_variable_of_the_score[the_first_number_in_the_series .. the_last_number_in_the_series]
::

##code::
a_variable_of_the_score[the_first_number_in_the_series .. ]
::
::


table::

##Examples:


list::

##To access from the first bar to the tenth bar:
code::
a_variable_of_the_score[1..10]
::

##To access from the eleventh bar to the end:
code::
a_variable_of_the_score[11..]
::
::
::

##To access a specific element of a bar:

list::
##To access the bar number

This is not normally used, but may be necessary when debugging your code.
code::
a_variable_of_the_score[the_number_of_a_particular_bar][\bar]
::

##To access a particular part
code::
a_variable_of_the_score[the_number_of_a_particular_bar][the_key_of_a_particular_part]
::


table::

##Exmaple:

To access the part \p1
code::
a_variable_of_the_score[the_number_of_a_particular_bar][\p1]
::
::
::

##To access the staff label of a specific part:

code::
a_variable_of_the_score[the_number_of_a_particular_bar][partNumber][\lbl]
::
table::
##Example:

To access the staff label of part \p1
code::
a_variable_of_the_score[1][\p1][\lbl]
::
::
::
::
::




















section::2. Adding title, composer and copyright














To add the title, composer and copyright of a piece, use an event with key and value pairs: for the title, use the key code::\title::, for the composer, use the key code::\composer::, and for the copyrights, use the key code::\rights::, as follows:

code::
(
aVariable = [
	(title: \untitled, composer: 'The name of the composer', rights: '©')
]
)
::





















section::3. Adding one or more bars





One or more bars can be added by adding an event as an array element, as follows:

code::
(
aVariable = [
	(title: \untitled, composer: 'The name of the composer', rights: '©'),
	(...),
	(...),
	(...),
	...
]
)
::


note::
A score example and code example are not provided in the correct form because more components are required to import a musicXML file into music software programs such as MuseScore, Dorico Finale and Logic Pro.
::



















section::4. Adding the first bar part elements










subsection::4.1. Adding one or more parts





One or more parts can be added by adding an event to any event in an array element, as follows:
code::
(
aVariable = [
	(title: \untitled, composer: 'The name of the composer', rights: '©'),
	(bar: 1, p1: (...), p2: (...), p3: (...), p4: (...), p5: (...), p6: (...), pn: (...)),
	(bar: 2, p1: (...), p2: (...), p3: (...)),
	(bar: 2, p1: (...), p3: (...), p5: (...)),
	...
]
)
::

warning::
All parts that appear at one point in the piece must be included in the first bar. Except for the first bars, the parts that do not contain any information may be omitted in any bar.
::


note::
A score example and code example are not provided in the correct form because more components are required to import a musicXML file into music software programs such as MuseScore, Dorico Finale and Logic Pro.
::










subsection::4.2. Adding one  or more staves with a staff label per part


To add a staff label, the name of the label should be defined with the key code::\lbl:: in a part of the first bar. To add one or more staves to a part, the number of staves should be defined with the key code::\staves:: in the code::\atr:: event in a part of the first bar, as follows (the label and the number of staves defined in the first bar are fixed until the end):


code::
(
score = [
	(title: \untitled, composer: 'The name of the composer', rights: '©'),
	(
		bar: 1,
		p1: (
			lbl: \Violin,
			atr: (
				staves: 1
			)
		),
		p2: (
			lbl: \Piano,
			atr: (
				staves: 2
			)
		),
		...
	),
	(bar: 2, p1: (...), p2: (...)),
	(bar: 3, p2: (...)),
	(bar: 4, p1: (...), p2: (...)),
	(bar: 5, p1: (...)),
	...
]
)
::

note::
list::
##If staff label is empty or nil, then piano will be used.
##If attribute is not defined, 4 staves are used to easily cover the range of the piano.
::
::


note::
A score example and code example are not provided in the correct form because more components are required to import a musicXML file into music software programs such as MuseScore, Dorico Finale and Logic Pro.
::











subsection::4.3. Adding optional transposition attribute for transposing instrument per part





To add optional transposition to a part label, the following properties should be defined as an array element of an event with the key code::\trans:: in a part of the first bar:

table::
##Integer||diatonic transposition
##Integer||chromatic transposition
##Integer||octave transposition
::

For example, the clarinet part should be defined, as follows:

code::
(
aVariable = [
	(title: \untitled, composer: 'The name of the composer', rights: '©'),
	(
		bar: 1,
		p1: (
			lbl: 'Clarinetto in si bemolle',
			atr: (
				staves: 1,
				trans:
				[
					-1 // diatonic transposition
					,
					-2 // chromatic transposition
					,
					0 // octave transposition
				],
				...
			)
		)
	)
]
)
::


note::
A score example and code example are not provided in the correct form because more components are required to import a musicXML file into music software programs such as MuseScore, Dorico Finale and Logic Pro.
::


















section::5. Adding one or more clefs per part




The clef or clefs in a part can be changed in any bar, and should be defined in an array with the key code::\clef:: in the code::\atr:: event in a part in a bar.
To define a clef, an array with two elements should be used. The first element defines the clef symbol and the second element defines its position on the staff (counting upwards).

list::
##The first element of an array that defines the clef:
table::
##code::\g::|| g-clef
##code::\c::||c-clef
##code::\f::||f clef
::
##The second element of an array that defines the clef:
table::
##1||the bottom line
##5||the fifth line from the bottom
::
::

To define multiple clefs on multiple staves, a staff array can be used within its parent array:

code::
(
aVariable = [
	(title: 'untitled', composer: 'me', rights: '©'),
	(
		bar: 1,
		p1: (
			lbl: 'Clarinetto in si bemolle',
			atr: (
				staves: 1,
				trans: [-1, -2, 0],
				clef: [[\g, 2]] // defining a clef
			)
		),
		p2: (
			lbl: \Piano,
			atr: (
				staves: 2,
				clef: [[\g, 2], [\f, 4]] // defininf two clefs
			)
		),
		...
	),
	(
		bar: 2,
		p1: (...),
		p2: (
			atr: (
				clef: [[\f, 4], [\f, 4]]
			)
		),
		...
	),
	(bar: 3, p1: (...), p2: (...), ...),
	...
]
)
::


note::
A score example and code example are not provided in the correct form because more components are required to import a musicXML file into music software programs such as MuseScore, Dorico Finale and Logic Pro.
::




















section::6. Adding time signature per part






The time signature in a part can be changed in any bar, and should be defined with the key code::\time:: in the code::\atr:: event in a part in a bar.
To define a normal time signature, an array with two elements should be used. The first element defines the upper number (top number) of the time signature, and the second element defines the lower number (bottom number) of the time signature. To define emphasis::senza-misura::, the symbol \x can be used instead of an array:

code::
(
aVariable = [
	(title: 'untitled', composer: 'me', rights: '©'),
	(
		bar: 1,
		p1: (
			lbl: 'Clarinetto in si bemolle',
			atr: (
				staves: 1,
				trans: [-1, -2, 0],
				clef: [[\g, 2]],
				time: \x
			)
		),
		p2: (
			lbl: \Piano,
			atr: (
				staves: 2,
				clef: [[\g, 2], [\f, 4]],
				time: \x
			)
		),
		...
	),
	(
		bar: 2,
		p1: (
			atr: (
				time: [4, 4]
			)
		),
		p2: (
			atr: (
				clef: [[\f, 4], [\f, 4]],
				time: [4, 4]
			)
		),
		...
	),
	(bar: 3, p1: (...), p2: (...), ...),
	...
]
)
::


note::
A score example and code example are not provided in the correct form because more components are required to import a musicXML file into music software programs such as MuseScore, Dorico Finale and Logic Pro.
::



















section::7. Adding key signature per part





The time signature in a part can be changed in any bar, and should be defined with the key code::\key:: in the code::\atr:: event in a part in a bar.

list::
##To define a key signature, an array with two elements should be used. The first element defines the number of sharps or flats, as follows:


table::
##...||
##2||two sharps, used for D major or B Minor
##1||one sharp, used for G major or E minor
##0||no sharps and no flats
##-1||one flat
##-2||two flats
##...||
::

##The second element defines the mode, as follows:

table::
##\none||atonal
##\C||C-major
##\a||A-minor
::
::

A mixed use of atonal and polytonal examples are as follows:

code::
(
aVariable = [
	(title: 'untitled', composer: 'me', rights: '©'),
	(
		bar: 1,
		p1: (
			lbl: 'Clarinetto in si bemolle',
			atr: (
				staves: 1,
				trans: [-1, -2, 0],
				clef: [[\g, 2]],
				time: \x,
				key: [0, \none]
			)
		),
		p2: (
			lbl: \Piano,
			atr: (
				staves: 2,
				clef: [[\g, 2], [\f, 4]],
				time: \x,
				key: [0, \none]
			)
		),
		...
	),
	(
		bar: 2,
		p1: (
			atr: (
				time: [4, 4],
				key: [1, \minor]
			)
		),
		p2: (
			atr: (
				clef: [[\f, 4], [\f, 4]],
				time: [4, 4],
				key: [2, \major]
			)
		),
		...
	),
	(bar: 3, p1: (...), p2: (...), ...),
	...
]
)
::


note::
A score example and code example are not provided in the correct form because more components are required to import a musicXML file into music software programs such as MuseScore, Dorico Finale and Logic Pro.
::




















section::8. Adding a tempo indication





To add a metronome number defined by the number of beat unit per minute, insert an array into a voice as follows:

table::
##the first element||\t
##the second element||beat unit


table::
## double-dotted maxima:                   || \Dm  || \D_
## dotted maxima                           || \dm  || \d_
## maxima                                   || \m   || \_
## double-dotted longa                     || \Dl  || \D0
## dotted longa                            || \dl  || \d0
## longa                                    || \l   || \0 ||0
## double-dotted breve                     || \Db  || \D9
## dotted breve                            || \db  || \d9
## breve                                    || \b   || \9 || 9
## double-dotted semibreve                 || \Dw  || \D8
## dotted semibreve                        || \dw  || \d8
## semibreve                                || \w   || \8 || 8
## double-dotted minim                     || \Dh  || \D7
## dotted minim                            || \dh  || \d7
## minim                                    || \h   || \7 || 7
## double-dotted crotchet                  || \Dq  || \D6
## dotted crotchet                         || \dq  || \d6
## crotchet                                 || \q   || \6 || 6
## double-dotted quaver                    || \De  || \D5
## dotted quaver                           || \de  || \d5
## quaver                                   || \e   || \5 || 5
## double-dotted semiquaver                || \Dx  || \D4
## dotted semiquaver                       || \dx  || \d4
## semiquaver                               || \x   || \4 || 4
## double-dotted demisemiquaver            || \Dt  || \D3
## dotted demisemiquaver                   || \dt  || \d3
## demisemiquaver                           || \t   || \3 || 3
## double-dotted hemidemisemiquaver        || \Di  || \D2
## dotted hemidemisemiquaver               || \di  || \d2
## hemidemisemiquaver                       || \i   || \2 || 2
::
##the third element||bpm (beat per minute)
::


table::

##strong::Example:::

table::
##Three different styles of code to get the same musicXML file:
table::
##
Array-in-Array notation
||
code::
(
var title = \tempo, score;
score = [
	(title: title, composer: 'me', rights: '©'),
	(
		bar: 1,
		p1: (
			lbl: 'Clarinetto in si bemolle',
			atr: (
				staves: 1,
				trans: [-1, -2, 0],
				clef: [[\g, 2]],
				time: \x,
				key: [0, \none]
			),
			v1: [
				[\t, \dq, 120]
			]
		)
	)
];
x = Notator.notate(score, ("~/Downloads/" ++ title ++ ".musicxml").standardizePath)
)
::
##
Symbol-in-Array notation
||
code::
(
var title = \tempo;
x = [
	(title: title, composer: 'me', rights: '©'),
	(
		bar: 1,
		p1: (
			lbl: 'Clarinetto in si bemolle',
			atr: (
				staves: 1,
				trans: [-1, -2, 0],
				clef: [[\g, 2]],
				time: \x,
				key: [0, \none]
			),
			v1: [
				"t dq 120"
			]
		)
	)
].notate(("~/Downloads/" ++ title ++ ".musicxml").standardizePath)
)
::
##
String notation
||
code::
(
var title = \tempo;
x = [
	(title: title, composer: 'me', rights: '©'),
	(
		bar: 1,
		p1: (
			lbl: 'Clarinetto in si bemolle',
			atr: (
				staves: 1,
				trans: [-1, -2, 0],
				clef: [[\g, 2]],
				time: \x,
				key: [0, \none]
			),
			v1: "t_dq_120"
		)
	)
].notate(("~/Downloads/" ++ title ++ ".musicxml").standardizePath, "Dorico 4")
)
::
::
::

The results of the evaluation of each of the codes above:

table::

##The

rendered

score

in

Dorico 4:

||image::resources/time signature - Dorico.svg::
::
::


















section::9. Adding a dynamic marking that is not attached to a note or chord





To add a dynamic marking, insert a one-element array into a voice: the element could be one of the following:

table::
##symbols||corresponding dynamic marking
##code::
\ffff
::


code::
\F4
::

code::
\s4 // \s stands for 'strong'
::
||emphasis::ffff::
##code::
\fff
::

code::
\F3
::

code::
\s3
::
||emphasis::fff::
##code::
\ff
::

code::
\F2
::

code::
\s2
::
||emphasis::ff::
##
code::
\F // (should be capitalised!)
::

code::
\F1
::
code::
\s1
::
||emphasis::f::
##code::
\mf
::

code::
\F0
::

code::
\s0
::
||
emphasis::mf::

##code::
\mp
::

code::
\p0
::

code::
\q0 // \q stands for 'quiet'
::
||
emphasis::mp::
##code::
\p
::

code::

\p1
::

code::
\q1
::
||emphasis::p::
##code::
\pp
::

code::

\p2
::

code::
\q2
::
||
emphasis::pp::
##code::
\ppp
::

code::

\p3
::

code::
\q3
::||emphasis::ppp::
##code::
\pppp
::

code::

\p4
::

code::
\q4
::||emphasis::pppp::
::

table::

##strong::Example:::

table::
##Three different styles of code to get the same musicXML file:
table::
##
Array-in-Array notation
||
code::
(
var title = \dynamic, score;
score = [
	(title: title, composer: 'me', rights: '©'),
	(
		bar: 1,
		p1: (
			lbl: 'Clarinetto in si bemolle',
			atr: (
				staves: 1,
				trans: [-1, -2, 0],
				clef: [[\g, 2]],
				time: \x,
				key: [0, \none]
			),
			v1: [
				[\t, \dq, 120],
				[\F]
			]
		)
	)
];
x = Notator.notate(score, ("~/Downloads/" ++ title ++ ".musicxml").standardizePath)
)
::
##
Symbol-in-Array notation
||
code::
(
var title = \dynamic;
x = [
	(title: title, composer: 'me', rights: '©'),
	(
		bar: 1,
		p1: (
			lbl: 'Clarinetto in si bemolle',
			atr: (
				staves: 1,
				trans: [-1, -2, 0],
				clef: [[\g, 2]],
				time: \x,
				key: [0, \none]
			),
			v1: [
				't dq 120', \F
			]
		)
	)
].notate(("~/Downloads/" ++ title ++ ".musicxml").standardizePath)
)
::
##
String notation
||
code::
(
var title = \dynamic;
x = [
	(title: title, composer: 'me', rights: '©'),
	(
		bar: 1,
		p1: (
			lbl: 'Clarinetto in si bemolle',
			atr: (
				staves: 1,
				trans: [-1, -2, 0],
				clef: [[\g, 2]],
				time: \x,
				key: [0, \none]
			),
			v1: "t_dq_120 F"
		)
	)
].notate(("~/Downloads/" ++ title ++ ".musicxml").standardizePath, "Dorico 4")
)
::
::
::


The results of the evaluation of each of the codes above:

table::

##The

rendered

score

in

Dorico 4:

||image::resources/dynamic - Dorico.svg::
::
::




















section::10. Adding Rests




The crotchet rest (or quarter rest) in the example in section link::#8. Adding a tempo indication:: and the same in the example in section link::#9. Adding a dynamic marking that is not attached to a note or chord:: are automatically inserted by Dorico. MuseScore and Finale insert a whole rest for the same place. To add rest symbols intentionally, the correct notation for each of the link::#Three ways to construct the musical information of a voice#three ways to construct the musical information of a voice:: should be used as follows:

table::
##numberedlist::
##Array-in-Array notation:
code::
v1: [[\t, \q, 90], [\r], [\r6]]
::
##Symbol-in-Array notation:
code::
v1: ['t q 90', \r, 'r6']
::
##String notation:
code::
v1: "t_q_90 r r6"
::
::
::


\r in Array-in-Array notation and r in the other notations stand alone without a rhythmic value if the previous rhythmic value is used. If the first rest stands alone, the default value of crotchet is used, as shown in link::#8. Adding a tempo indication:: for Array-in-Array notation (also below), and as shown below for the other two notations:


table::

##
||
Array-in-Array notation
||
Symbol-in-Array notation,

String notation

## triple-dotted maxima

soft::(MuseScore 4.1.1 crashes::

	soft::when this value is used for a rest.)::
||
code::
\Tm
::

code::
\T_
::
||
code::
m...
::

## double-dotted maxima

soft::(MuseScore 4.1.1 crashes::

	soft::when this value is used for a rest.)::
||
code::
\Dm
::

code::
\D_
::
||
code::
m..
::

## dotted maxima

soft::(MuseScore 4.1.1 crashes::

	soft::when this value is used for a rest.)::
||
code::
\dm
::

code::
\d_
::
||
code::
m.
::

## maxima

soft::(MuseScore 4.1.1 crashes::

	soft::when this value is used for a rest.)::
||
code::
\m
::

code::
\_
::
||
code::
m
::

## triple-dotted longa
||
code::
\Tl
::

code::
\T0
::
||
code::
l...
::

## double-dotted longa
||
code::
\Dl
::

code::
\D0
::
||
code::
l..
::

## dotted longa
||
code::
\dl
::

code::
\d0
::
||
code::
l.
::

## longa
||
code::
\l
::

code::
\0
::
code::
0
::
||
code::
l
::

## triple-dotted breve
||
code::
\Tb
::

code::
\T9
::
||
code::
b...
::

## double-dotted breve
||
code::
\Db
::

code::
\D9
::
||
code::
b..
::

## dotted breve
||
code::
\db
::

code::
\d9
::
||
code::
b.
::

## breve
||
code::
\b
::

code::
\9
::

code::
9
::
||
code::
b
::

## triple-dotted semibreve
||
code::
\Tw
::

code::
\T8
::
||
code::
w...
::
code::
1...
::

## double-dotted semibreve
||
code::
\Dw
::

code::
\D8
::
||
code::
w..
::
code::
1..
::

## dotted semibreve
||
code::
\dw
::

code::
\d8
::
||
code::
w.
::
code::
1.
::

## semibreve
||
code::
\w
::

code::
\8
::

code::
8
::
||
code::
w
::
code::
1
::

## triple-dotted minim
||
code::
\Th
::

code::
\T7
::
||
code::
h...
::
code::
2...
::

## double-dotted minim
||
code::
\Dh
::

code::
\D7
::
||
code::
h..
::
code::
2..
::

## dotted minim
||
code::
\dh
::

code::
\d7
::
||
code::
h.
::
code::
2.
::

## minim
||
code::
\h
::

code::
\7
::

code::
7
::
||
code::
h
::
code::
2
::

## triple-dotted crotchet
||
code::
\Tq
::

code::
\T6
::
||
code::
q...
::
code::
4...
::

## double-dotted crotchet
||
code::
\Dq
::

code::
\D6
::
||
code::
q..
::
code::
4..
::

## dotted crotchet
||
code::
\dq
::

code::
\d6
::
||
code::
q.
::
code::
4.
::

## crotchet
||
code::
\q
::

code::
\6
::

code::
6
::
||
code::
q
::
code::
4
::

## triple-dotted quaver
||
code::
\Te
::

code::
\T5
::
||
code::
e...
::
code::
8...
::

## double-dotted quaver
||
code::
\De
::

code::
\D5
::
||
code::
e..
::
code::
8..
::

## dotted quaver
||
code::
\de
::

code::
\d5
::
||
code::
e.
::
code::
8.
::

## quaver
||
code::
\e
::

code::
\5
::

code::
5
::
||
code::
e
::
code::
8
::

## triple-dotted semiquaver
||
code::
\Tx
::

code::
\T4
::
||
code::
x...
::
code::
16...
::

## double-dotted semiquaver
||
code::
\Dx
::

code::
\D4
::
||
code::
x..
::
code::
16..
::

## dotted semiquaver
||
code::
\dx
::

code::
\d4
::
||
code::
x.
::
code::
16.
::

## semiquaver
||
code::
\x
::

code::
\4
::

code::
4
::
||
code::
x
::
code::
16
::

## triple-dotted demisemiquaver
||
code::
\Tt
::

code::
\T3
::
||
code::
t...
::
code::
32...
::

## double-dotted demisemiquaver
||
code::
\Dt
::

code::
\D3
::
||
code::
t..
::
code::
32..
::

## dotted demisemiquaver
||
code::
\dt
::

code::
\d3
::
||
code::
t.
::
code::
32.
::

## demisemiquaver
||
code::
\t
::

code::
\3
::

code::
3
::
||
code::
t
::
code::
32
::

## triple-dotted hemidemisemiquaver
||
code::
\Ti
::

code::
\T2
::
||
code::
i...
::
code::
64...
::

## double-dotted hemidemisemiquaver
||
code::
\Di
::

code::
\D2
::
||
code::
i..
::
code::
64..
::

## dotted hemidemisemiquaver
||
code::
\di
::

code::
\d2
::
||
code::
i.
::
code::
64.
::

## hemidemisemiquaver
||
code::
\i
::

code::
\2
::

code::
2
::
||
code::
i
::
code::
64
::

## triple-dotted quasihemidemisemiquaver
||
code::
\Ty
::

code::
\T1
::
||
code::
y...
::
code::
128...
::

## double-dotted quasihemidemisemiquaver
||
code::
\Dy
::

code::
\D1
::
||
code::
y..
::
code::
128..
::

## dotted quasihemidemisemiquaver
||
code::
\dy
::

code::
\d1
::
||
code::
y.
::
code::
128.
::

## quasihemidemisemiquaver

semihemidemisemiquaver
||
code::
\y
::

code::
\1
::

code::
1
::
||
code::
y
::
code::
128
::
::


table::

##strong::Example:::

table::
##Three different styles of code to get the same musicXML file:
table::
##
Array-in-Array notation
||
code::
(
var title = \rests, score;
score = [
	(title: title, composer: 'me', rights: '©'),
	(
		bar: 1,
		p1: (
			lbl: 'Clarinetto in si bemolle',
			atr: (
				staves: 1,
				trans: [-1, -2, 0],
				clef: [[\g, 2]],
				time: \x,
				key: [0, \none]
			),
			v1: [
				[\t, \dq, 120],
				[\r],     // rhythmic value: default, crotchet
				[\r, \e], // rhythmic value: quaver
				[\r]      // rhythmic value: the same as the last rhythmic value
				//                           in the same voice
			],
			v2: [
				[\r],     // rhythmic value: default, crotchet
				[\r, \dh] // rhythmic value: dotted minim
			]
		)
	),
	(
		bar: 2,
		p1: (
			v1: [
				[\r], // rhythmic value: the previous value of the same voice
				[\r, \q],
				[\r, \q],
				[\r, 6]
			],
			v2: [
				[\r], // rhythmic value: the previous value of the same voice
				[\r, 6]
			]
		)
	),
	(
		bar: 3,
		p1: (
			v1: [
				[\r, \Tl], [\r, \D0], [\r, \dl], [\r, \0]
			]
		)
	),
	(
		bar: 4,
		p1: (
			v1: [
				[\r, \T9], [\r, \Db], [\r, \d9], [\r, \b]
			]
		)
	),
	(
		bar: 5,
		p1: (
			v1: [
				[\r, \Tw], [\r, \Dw], [\r, \dw], [\r, \w],
				[\r, \T8], [\r, \D8], [\r, \d8], [\r, 8]
			]
		)
	),
	(
		bar: 6,
		p1: (
			v1: [
				[\r, \Th], [\r, \Dh], [\r, \dh], [\r, \h],
				[\r, \T7], [\r, \D7], [\r, \d7], [\r, \7]
			]
		)
	),
	(
		bar: 7,
		p1: (
			v1: [
				[\r, \Tq], [\r, \Dq], [\r, \dq], [\r, \q],
				[\r, \T6], [\r, \D6], [\r, \d6], [\r, 6]
			]
		)
	),
	(
		bar: 8,
		p1: (
			v1: [
				[\r, \Te], [\r, \De], [\r, \de], [\r, \e],
				[\r, \T5], [\r, \D5], [\r, \d5], [\r, \5]
			]
		)
	),
	(
		bar: 9,
		p1: (
			v1: [
				[\r, \Tx], [\r, \Dx], [\r, \dx], [\r, \x],
				[\r, \T4], [\r, \D4], [\r, \d4], [\r, \4]
			]
		)
	),
	(
		bar: 10,
		p1: (
			v1: [
				[\r, \Tt], [\r, \Dt], [\r, \dt], [\r, \t],
				[\r, \T3], [\r, \D3], [\r, \d3], [\r, 3]
			]
		)
	),
	(
		bar: 11,
		p1: (
			v1: [
				[\r, \Ti], [\r, \Di], [\r, \di], [\r, \i],
				[\r, \T2], [\r, \D2], [\r, \d2], [\r, \2]
			]
		)
	),
	(
		bar: 12,
		p1: (
			v1: [
				[\r, \Ty], [\r, \Dy], [\r, \dy], [\r, \y],
				[\r, \T1], [\r, \D1], [\r, \d1], [\r, 1]
			]
		)
	)
];
x = Notator.notate(score, ("~/Downloads/" ++ title ++ ".musicxml").standardizePath)
)
::
##
Symbol-in-Array notation
||
code::
(
var title = \rests;
x = [
	(title: title, composer: 'me', rights: '©'),
	(
		bar: 1,
		p1: (
			lbl: 'Clarinetto in si bemolle',
			atr: (
				staves: 1,
				trans: [-1, -2, 0],
				clef: [[\g, 2]],
				time: \x,
				key: [0, \none]
			),
			v1: ['t dq 120', \r, 'r e', \r],
			v2: [\r, 'r h.']
		)
	),
	(
		bar: 2,
		p1: (
			v1: [\r, 'r q', 'r q', 'r 4'],
			v2: [\r, '\r 4']
		)
	),
	(
		bar: 3,
		p1: (
			v1: ['r l...', 'r l..', 'r l.', 'r l']
		)
	),
	(
		bar: 4,
		p1: (
			v1: ['r b...', 'r b..', 'r b.', 'r, b']
		)
	),
	(
		bar: 5,
		p1: (
			v1: [
				'r w...', 'r w..', 'r w.', 'r w',
				'r 1...', 'r 1..', 'r 1.', 'r 1'
			]
		)
	),
	(
		bar: 6,
		p1: (
			v1: [
				'r h...', 'r h..', 'r h.', 'r h',
				'r 2...', 'r 2..', 'r 2.', 'r 2'
			]
		)
	),
	(
		bar: 7,
		p1: (
			v1: [
				'r q...', 'r q..', 'r q.', 'r q',
				'r 4...', 'r 4..', 'r 4.', 'r 4'
			]
		)
	),
	(
		bar: 8,
		p1: (
			v1: [
				'r e...', 'r e..', 'r e.', 'r e',
				'r 8...', 'r 8..', 'r 8.', 'r 8'
			]
		)
	),
	(
		bar: 9,
		p1: (
			v1: [
				'r x...', 'r x..', 'r x.', 'r x',
				'r 16...', 'r 16..', 'r 16.', 'r 16'
			]
		)
	),
	(
		bar: 10,
		p1: (
			v1: [
				'r t...', 'r t..', 'r t.', 'r t',
				'r 32...', 'r 32..', 'r 32.', 'r 32'
			]
		)
	),
	(
		bar: 11,
		p1: (
			v1: [
				'r i...', 'r i..', 'r i.', 'r i',
				'r 64...', 'r 64..', 'r 64.', 'r 64'
			]
		)
	),
	(
		bar: 12,
		p1: (
			v1: [
				'r y...', 'r y..', 'r y.', 'r y',
				'r 128...', 'r 128..', 'r 128.', 'r 128'
			]
		)
	)
].notate(("~/Downloads/" ++ title ++ ".musicxml").standardizePath)
)
::
##
String notation
||
code::
(
var title = \rests;
x = [
	(title: title, composer: 'me', rights: '©'),
	(
		bar: 1,
		p1: (
			lbl: 'Clarinetto in si bemolle',
			atr: (
				staves: 1,
				trans: [-1, -2, 0],
				clef: [[\g, 2]],
				time: \x,
				key: [0, \none]
			),
			v1: "t_dq_120 r r_e r",
			v2: "r r_h."
		)
	),
	(
		bar: 2,
		p1: (
			v1: "r r_q r_q r_4",
			v2: "r r_4"
		)
	),
	(
		bar: 3,
		p1: (
			v1: "r_l... r_l.. r_l. r_l"
		)
	),
	(
		bar: 4,
		p1: (
			v1: "r_b... r_b.. r_b. r_b"
		)
	),
	(
		bar: 5,
		p1: (
			v1: "r_w... r_w.. r_w. r_w r_1... r_1.. r_1. r_1"
		)
	),
	(
		bar: 6,
		p1: (
			v1: "r_h... r_h.. r_h. r_h r_2... r_2.. r_2. r_2"
		)
	),
	(
		bar: 7,
		p1: (
			v1: "r_q... r_q.. r_q. r_q  r_4... r_4.. r_4. r_4"
		)
	),
	(
		bar: 8,
		p1: (
			v1: "r_e... r_e.. r_e. r_e r_8... r_8.. r_8. r_8"
		)
	),
	(
		bar: 9,
		p1: (
			v1: "r_x... r_x.. r_x. r_x r_16... r_16.. r_16. r_16"
		)
	),
	(
		bar: 10,
		p1: (
			v1: "r_t... r_t.. r_t. r_t r_32... r_32.. r_32. r_32"
		)
	),
	(
		bar: 11,
		p1: (
			v1: "r_i... r_i.. r_i. r_i r_64... r_64.. r_64. r_64"
		)
	),
	(
		bar: 12,
		p1: (
			v1: "r_y... r_y.. r_y. r_y r_128... r_128.. r_128. r_128"
		)
	)
].notate(("~/Downloads/" ++ title ++ ".musicxml").standardizePath)
)
::
::
::


The results of the evaluation of each of the codes above:

table::

##The rendered score in Dorico 4 Pro:
image::resources/rests in Dorico.png::
||The rendered score in MuseScore 4 (with an error message):
image::resources/rests in MuseScore 4.png::
::
::




















section::11. Adding notes, including note-attached dynamics, articulation, tie and slur





A pitch or chord can be added using MIDI pitch number or scientific pitch notation, and this pitch (or pitches) should be placed as an array.
Currently, 12-tone equal temperament, 24-tone equal temperament and 48-tone equal temperament are supported by music engraving software such as Dorico 4 Pro, MuseScore 4, Finale 27 and so on, so link::Classes/Notator:: class supports eighth-tone pitches. Refer to an example of the link::Classes/Notator#Eighth-tone Scale through algorithmic construction#Eighth-tone Scale example in Notator help document::.
table::
##Related help documents of the link::Classes/SPN:: class and link::Classes/PitchClassSet:: class included in link::Classes/Notator:: Quark.
list::
##link::Classes/PitchClassSet#Microtonal Support::
##link::Classes/PitchClassSet#Full list of pitch class names with all styles::
##link::Classes/SPN#Full list of quartertones in scientific notation with all styles::
::
::


To add notes or chords, use the correct notation for each of the link::#Three ways to construct the musical information of a voice#three ways to construct the musical information of a voice::, as follows:

table::
##numberedlist::
##Array-in-Array notation:
code::
v1: [[\t,\q,90],[\c4], [['cn4', \g4]], [[60, 67]], [[\c4, 67]]]
::
##Symbol-in-Array notation:
code::
v1: ['t q 90', \c4, '<cn4 g4>', '<60 67>', '<c4 67>']
::
##String notation:
code::
v1: "t_q_90 c4 <cn4_g4> <60_67> <c4_67>"
::
::
::


To add additional duration, dynamics, articulation, tie and slur, the correct notation for each of the link::#Three ways to construct the musical information of a voice#three ways to construct the musical information of a voice:: should be used as follows (The same rules as above for rest symbol durations and dynamic markers should be applied to note durations and note-attached dynamic markers.):

table::
##numberedlist::
##Array-in-Array notation:
code::
v1: [
	[t, \q, 90],
	[\c4, \e, \f, \a, \j, \u], // [\c4, \5, \f, $>, $~, $(]
	[\cn4, \dq, \J],           // [\cn4, \d6, $`]
	[60, \x, \sf, \U]          // [60, \4, \sf, $)]
]
::
##Symbol-in-Array notation:
code::
v1: ['t q 90', 'c4 8 f > ~ (', 'cn4 4. `', '60 16 sf )']
::
##String notation:
code::
v1: "t_q_90 c4_8_f_>_~_( cn4_4._` 60_16_sf_)"
::
::
::









subsection:: 11.1. Notes and chords






table::
##
strong::Example:::

Three different styles of code to get the same musicXML file:
table::
##
Array-in-Array notation
||
code::
(
var title = 'notes and chords';
x = [
	(title: title, composer: 'me', rights: '©'),
	(
		bar: 1,
		p1:
		(
			lbl: \Soprano,
			atr: (key: [0, \none], time:\x, staves: 1, clef: [[\c, 1]]),
			v1: // voice 1.
			[
				[\t, \q, 120],

				[\F],

				[\c4]
				// The array containing a scientific pitch name defines the pitch
				// of the note.
				// - S: double sharp
				// - s: sharp
				// - (n: natural) can be ommited
				// - f: flat
				// - F: double flat
				// A quarter tone could be expressed as follows:
				// - \c5:  c5 natural
				// - \cq5: a quarter-tone raised c5
				// - \cs5: c#5
				// - \cQ5: a quarter-tone raised c#5
				// Its duration follows the last duration defined with the
				// previous note, if any.
				// If the note is the first note of the entire notation
				// information, it follows the default value (crotchet).
				// Its dynamic mark follows the last dynamic mark defined with the
				// previous note, if it any.
				// If the note is the first note of the whole notation
				// information, it will follow the default value (mp).
				,

				[\cn4],

				[62]
				// The array containing a number defines the pitch of the note.
				// The number should be an integer or a float with a single
				// decimal ending in 0.5 as follows:
				// - 72   = \c5:  c5 natural
				// - 72.5 = \cq5: one quarter-tone raised c5
				// - 73   = \cs5: c#5
				// - 73.5 = \cQ5: one quarter-tone raised c#5
				// A float with a single decimal ending in 0.5 indicates a quarter
				// tone.
				// The range of numbers supported is as follows:
				// - range: 0 ~ 127
				// Its duration and dynamic mark are the same as described above.
				,

				[[64, 64.5, \g4, \gq4]]
				// A chord (notes of equal duration) should be defined as an
				// array. Its duration and dynamic mark are the same as described
				// above.
				,

				[67],

				[65, \w]
				// The two-element array containing a scientific pitch name
				// followed by a duration defines the pitch of the note and its
				// duration. The following durations are ready to use:
				,

				[67, \q, \f]
				// The three-element array containing a scientific pitch name
				// followed by a duration then a dynamic mark defines the pitch of
				// the note, its duration and dynamic mark of the note.
				,

				[67, \q, \s2],

				[67, \q, \q3],

			]
		)
	)
].notate(("~/Downloads" +/+ title ++ ".musicxml").standardizePath, 'MuseScore 4')
)
::
##
Symbol-in-Array notation
||
code::
(
var title = 'notes and chords';
x = [
	(title: title, composer: 'me', rights: '©'),
	(
		bar: 1,
		p1:
		(
			lbl: \Soprano,
			atr: (key: [0, \none], time:\x, staves: 1, clef: [[\c, 1]]),
			v1: // voice 1.
			[
				't q 120',
				\F,
				\c4, \cn4, \62, '<64 64.5 g4 gq4>', \67, '65 w', '67 q f',
				'67 q s2',
				'67 q, q3',
			]
		)
	)
].notate(("~/Downloads" +/+ title ++ ".musicxml").standardizePath, 'MuseScore 4')
)
::
##
String notation
||
code::
(
var title = 'notes and chords';
x = [
	(title: title, composer: 'me', rights: '©'),
	(
		bar: 1,
		p1:
		(
			lbl: \Soprano,
			atr: (key: [0, \none], time:\x, staves: 1, clef: [[\c, 1]]),
			v1: "t_q_120 F c4 cn4 62 <64_64.5_g4_gq4> 67 65_w 67_q_f 67_q_s2 67_q_q3"
		)
	)
].notate(("~/Downloads" +/+ title ++ ".musicxml").standardizePath, 'MuseScore 4')
)
::
::

The results of the evaluation of the codes above:

table::
##
The rendered score in Dorico 4 Pro:

image::resources/notes_and_chords Dorico 4.svg::
||
The rendered score in MuseScore 4:

image::resources/notes_and_chords MuseScore 4 @102dpi.png::
::
::









subsection::11.2. Multiple instruments


table::
##strong::Example:::

code::
(
x = [
	(title: 'untitled', composer: 'me', rights: '©'),
	(
		bar: 1,
		p1: (
			lbl: \Contralto,
			atr: (key: [0, \none], time: \x, staves: 1, clef: [[\c, 3]]),
			v1: [
				[[\c5, \a4, \fs4, \ds4], \_], [[\cq5, \aq4, \fQ4, \dQ4], \d_], [[\df5, \bf4, \g4, \e4], \D_]]
		),
		p2: (
			lbl: \Tenore,
			atr: (key: [0, \none], time: \x, staves: 1, clef: [[\c, 4]]),
			v1: [
				[[63.5, 60.5, 57.5, 54.5], \D0], [[64, 61, 58, 55], \d0], [[64.5, 61.5, 58.5, 55.5], \0]],
			v2: [[\r, \D0], [\r, \d0], [\r, \0]]
		),
		p3: (
			lbl: \Basso,
			atr: (key: [0, \none], time: \x, staves: 1, clef: [[\f, 4]]),
			v1: [[\r, \D9], [\r, \d9], [\r, 9]],
			v2: [[[52, \g3], \D9], [[\e3, 55], \d9], [[52.5, \gQ3], 9], [[\eq3, 56.5]]]
		),
		p4: (
			lbl: 'Clarinetto in si bemolle',
			atr: (key: [0, \none], time: \x, staves: 1, clef: [[\g, 2]], trans:[-1, -2, 0]),
			v1: [[72, \D8], [\cq5, \d8], [73, 8], [\cQ5]],
			v2: [[67, \D8], [\gq4, \d8], [68, 8], [\gQ4]]
		),
		p5: (
			lbl: 'Violino',
			atr: (key: [0, \none], time: \x, staves: 1, clef: [[\g, 2]]),
			v1: [[72, \D8], [\cq5, \d8], [73, 8], [\cQ5]],
			v2: [[67, \D8], [\gq4, \d8], [68, 8], [\gQ4] ]
		),
		p6: (
			lbl: \Viola,
			atr: (key: [0, \none], time: \x, staves: 1, clef: [[\c, 3]]),
			v1: [
				[\cq4, \D7], [\dq4, \d7], [[61.5, \dq4, \cq4], 7]]
		),
		p7: (
			lbl: \Violoncello,
			atr: (key: [0, \none], time: \x, staves: 1, clef: [[\f, 4]]),
			v1: [[\c3, \D6], [\c3, \d6], [\c3, 6]]
		),
		p8: (
			lbl: \Contrabass,
			atr: (key: [0, \none], time: \x, staves: 1, clef: [[\f, 4]], trans: [0, 0, -1]),
			v1: [[\c3, \D6], [\c3, \d6], [\c3, 6]]
		),
		p9: (
			lbl: \Piano,
			atr: (key: [0, \none], time: \x, staves: 2, clef: [[\g, 2], [\f, 4]]),
			v1: [
				[[\c5, \e5, \g5], \D5],	[\ef5, \d5],
				[\c5, \5], [$|], [$|, \D4], [$|, \d4], [$|, \4],
				[[\d5, 76], \D3], [$|, \d3], [$|, \3],
				[[\d4, 65, 68], \D2], [$|, \d2], [$|, \2], [[69, 74, 88], \D1], [$|, \d1], [$|, \1]
			],
			v2: [[\cF4, \h], [\cf3, \h]]
		)
	)
].notate("~/Downloads/multiple instruments.musicxml".standardizePath, 'MuseScore 4')
)
::


The results of the above code block evaluation:
table::
##
The rendered score in Dorico 4 Pro:

image::resources/notes on music scores in multiple instruments Dorico 4.svg::
||
The rendered score in MuseScore 4:
image::resources/notes on music scores in multiple instruments MuseScore 4 @102dpi.png::
::
::










subsection::11.3. Articulations, ties, slurs, pitch repetition and previous entry repetition
The list of currently supported articulations is as follows:
table::
##||Array-in-Array notation||Symbol-in-Array notation,

String notation

##accent          ||
code::
\a
::

code::
$>
::
||
code::
>
::

##strong-accent   ||
code::
\A
::

code::
$^
::
||
code::
^
::

##staccato        ||
code::
\s
::

code::
$.
::
||
code::
.
::

##staccatissimo   ||
code::
\S
::

code::
$!
::
||
code::
!
::

##tenuto          ||
code::
\o
::

code::
$-
::
||
code::
-
::

##detached-legato ||
code::
\O
::

code::
$_
::
||
code::
_
::
::


The list of currently supported ties is as follows:
table::
##||Array-in-Array notation||Symbol-in-Array notation,

String notation

##
tie start
||
code::
$j \\ <- from 'join'
::

code::
$~
::
||
code::
~
::
##
tie stop
||
code::
$J
::

code::
$`
::
||
code::
`
::
##
laissez vibrer
||
code::
\lv
::

code::
$r \\ <- from 'let-ring'
::
||
code::
r
::

##
tie stop with laissez vibrer
||
code::
$R
::||
code::
R
::
::










The list of currently supported slurs is as follows:


table::
##||Array-in-Array notation||Symbol-in-Array notation,

String notation

##
slur start
||
code::
\u \\ <- from u in 'slur'
::

code::
$(
::
||
code::
(
::
##
slur stop
||
code::
\U
::

code::
$)
::
||
code::
)
::
::


The list of the currently supported abbreviations for the repetitive pitches and the repetition of entries is as follows:


table::
##||Array-in-Array notation||Symbol-in-Array notation,

String notation

##
repetitive pitche (a note) or pitches (a chord)
||
code::
$|
::
||
code::
|
::
##
The repetition of the previous entry
||
code::
$\\
::
||
code::
\\
::
::


table::
##Three different styles of code to get the same musicXML file:
table::
##
Array-in-Array notation
||
code::
(
var title = \articulations;
x = [
	(title: title, composer: 'me', rights: '©'),
	(
		bar: 1,
		p1:
		(
			lbl: \Soprano,
			atr: (key: [0, \none], time:[4, 4], staves: 1, clef: [[\c, 1]]),
			v1: // voice 1.
			[
				[\t, \q, 60],

				[68, \e, \sf, $!]
				// The four-element array containing a scientific pitch name
				// followed by a duration, a dynamic mark and an articulation
				// defines the pitch of the note, its duration, dynamic mark and
				// articulation.
				,

				[$|, \e, \pp, $~]
				// The five-element array containing a scientific pitch name
				// followed by a duration, a dynamic mark, an articulation and
				// a tie status defines the pitch of the note, its duration,
				// dynamic mark, articulation and tie status.
				,

				[$|, \q, $~],
				// The array containing $| defines that the pitch of the note is
				// a repetition of the previous one. Here its duration does not
				// follow those of the previous note

				[$|, \h, \pp, $~]
			]
		)
	),
	(
		bar: 2,
		p1:
		(
			v1: // voice 1.
			[
				[$|, \dq, $~],

				[$|, \e, $`],

				[\r, \q],

				[\r, \q]
			]
		)
	),
	(
		bar: 3,
		p1:
		(
			v1: [
				[68, \e],

				[$|, \e, \F2, $^, $r, $(]
				// The six-element array containing a scientific pitch name
				// followed by a duration, a dynamic mark, an articulation, tie
				// status a slur status defines the pitch of the note, its
				// duration, dynamic mark, articulation, tie status and slur
				// status.
				,

				[69, \p]
				// The elements of an entry can be flexibly omitted.
				// The two-element array containing a scientific pitch name
				// followed by an dynamic mark defines the pitch of the note with
				// its dynamic mark, and its duration follows the duration of the
				// previous note
				,

				[71, \p]
				// The repetition of the dynamic mark will not be displayed on the
				// score, except for sf.
				,

				[72, \sf],

				[73, \sf],

				[74, \pp, $^, $r],

				[$|, \F]
				// The two-element array containing a scientific pitch name
				// followed by an articulation defines the pitch of the note with
				// its articulation, and its duration and dynamic mark follow
				// those of the previous note.
				,

				[$|, \F],
				[[74, 75]],
				[$|, \h, \F, $_],
				[$|, \p, $-],
				[$|, $)],

				[$\\]
				// The array containing $\\ defines that the entry is a repetition
				// of the previous entry.
				,

				[[\c5, \a4, \fs4, \ds4], \x, \F],
				[$\\, \F],
				[$\\],
				[$\\],
				[$|, \7]
			]
		)
	)
].notate(("~/Downloads"+/+ title ++ ".musicxml").standardizePath, 'Dorico 4')
)
::
##
Symbol-in-Array notation
||
code::
(
var title = \articulations;
x = [
	(title: title, composer: 'me', rights: '©'),
	(
		bar: 1,
		p1:
		(
			lbl: \Soprano,
			atr: (key: [0, \none], time:[4, 4], staves: 1, clef: [[\c, 1]]),
			v1: // voice 1.
			['t q 60', '68 e sf !','| e pp ~', '| q ~', '| h pp ~']
		)
	),
	(
		bar: 2,
		p1:
		(
			v1: // voice 1.
			['| dq ~', '| e `', 'r q', 'r q']
		)
	),
	(
		bar: 3,
		p1:
		(
			v1: ['68 e', '| e F2 ^ r (', '69 p', '71 p', '72 sf', '73 sf',
				'74 pp ^ r', '| F', '| F',
				'<74 75>', '| h F _', '| p -', '| )',
				'\\',
				'<c5 a4 fs4 ds4> x F', '\\ F', '\\', '\\', '| h']
		)
	)
].notate(("~/Downloads"+/+ title ++ ".musicxml").standardizePath, 'Dorico 4')
)
::
##
String notation
||
code::
(
var title = \articulations;
x = [
    (title: title, composer: 'me', rights: '©'),
    (
        bar: 1,
        p1:
        (
            lbl: \Soprano,
            atr: (key: [0, \none], time:[4, 4], staves: 1, clef: [[\c, 1]]),
            v1: "t_q_60 68_e_sf_! |_e_pp_~ |_q_~ |_h_pp_~"
        )
    ),
    (
        bar: 2,
        p1:
        (
            v1: "|_dq_~ |_e_` r_q r_q"
        )
    ),
    (
        bar: 3,
        p1:
        (
            v1: "
68_e |_e_F2_^_r_( 69_p 71_p 72_sf 73_sf
74_pp_^_r |_F |_F
<74_75> |_h_F__ |_p_- |_)
\\
<c5_a4_fs4_ds4>_x_F \\_F \\ \\ |_h"
        )
    )
].notate(("~/Downloads"+/+ title ++ ".musicxml").standardizePath, 'Dorico 4')
)
::
::

The results of the evaluation of the codes above:

table::
##
The rendered score in Dorico 4 Pro:

image::resources/articulations.svg::
::
::
